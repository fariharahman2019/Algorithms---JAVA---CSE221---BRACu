
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Task01
{
    static int v;
    static int graph[][];
    static LinkedList[] a1;
    static  int end=0;
    public static void main(String[] args)
    {
        GraphInput();
        int moves=bfs(graph,0,end);
        System.out.println(moves);


    }
    public static void GraphInput()
    {
        try
        {
            String str;
            FileReader fr = new FileReader("L:\\input01.txt");
            BufferedReader obj = new BufferedReader(fr);
            str = obj.readLine();
            //v=node
            v = Integer.parseInt(str);
            graph = new int[v][v];
            str = obj.readLine();
            int edge_number = Integer.parseInt(str);
            for (int i=0;i<edge_number;i++)
            {
                str=obj.readLine();
                StringTokenizer st = new StringTokenizer(str, " ");
                int token1 = Integer.parseInt(st.nextToken());
                int token2 = Integer.parseInt(st.nextToken());
                graph[token1][token2] = 1;
                graph[token2][token1] = 1;
            }
            String start=obj.readLine();
            end = Integer.parseInt(start);
        }
        catch (IOException e)
        {
            System.out.println("Vul Hoise");
        }

    }
    public static int bfs (int [][] a,int start,int end)
    {
        //White=W;
        //Gray=G;
        //Black=B;
        String color[]=new String[v+1];
        int p[]=new int[v+1];
        int d[]=new int[v+1];
        Queue<Integer> q=new LinkedList<>();
        for (int i=0;i<v;i++)
        {
            color[i]="W";
            d[i]=Integer.MAX_VALUE;//infinity
            p[i]=Integer.MIN_VALUE;//null
        }
        color[start]="G";
        d[start]=0;
        p[start]=Integer.MIN_VALUE;
        q.add(start);//works as enqueue
        while (!q.isEmpty())
        {
            int x=q.poll();//works as dequeue
            for (int i=0; i<v; i++)
            {
                if((color[i].equals("W")) && (graph[x][i]==1))
                {
                    color[i]="G";
                    d[i]=d[x]+1;
                    p[i]=x;
                    q.add(i);
                }
            }
            color[x]="B";
        }
       int x=printBfs(d,p,end);
        return x;
    }
    public static int printBfs(int [] distance,int [] parent,int end)
    {
        int k=0;
        for (int i=0;i<v;i++)
        {
            int t=i;
            String s=null;
            if(i==end)
            {
                //System.out.println("The destination is "+ i + " and distance from source is -" + distance[i] + ",path is ->" + printDirection(parent, i));
                k=distance[i];
            }
        }
        return k;
    }
    public static String printDirection(int []p,int i)
    {
        String s="";
        int t=i;
        while (p[i]!=Integer.MIN_VALUE)
        {
            String s1=String.valueOf(p[i]);
            s=s1 + ", " +s;
            i=p[i];
        }
        s=s+t;
        return s;
    }
}